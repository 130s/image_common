/**
\mainpage
\htmlinclude manifest.html

When working with images we often want specialized transport strategies,
such as using image compression or streaming video codecs. \b image_transport
provides classes and nodes for transporting images in arbitrary over-the-wire
representations, while hiding this complexity from the developer.

<!-- 
In addition to providing an overview of your package,
this is the section where the specification and design/architecture 
should be detailed. While the original specification may be done on the
wiki, it should be transferred here once your package starts to take shape.
You can then link to this documentation page from the Wiki. 
-->


\section codeapi Code API
When transporting images, you should use image_transport's classes as drop-in
replacements for ros::Publisher and ros::Subscriber:
- image_transport::ImagePublisher - advertises subtopics for all available transport options
- image_transport::ImageSubscriber - subscribes an Image callback to any topic produced by ImagePublisher

Vision applications often require image metadata (camera intrinsics, etc.) published on a
separate CameraInfo topic, or require special care in sequencing incoming Images. For such
tasks see:
- image_transport::CameraImageSubscriber - subscribe a single callback to synchronized image (using any transport) and CameraInfo topics
- image_transport::ImageSubscriberFilter - a wrapper for ImageSubscriber compatible with message_filters

Finally, if you are an advanced user implementing your own image transport option, you will need to
implement these interfaces:
- image_transport::PublisherPlugin - see image_transport::RawPublisher for the simplest possible implementation
- image_transport::SubscriberPlugin - see image_transport::RawSubscriber for the simplest possible implementation

<!--
Provide links to specific auto-generated API documentation within your
package that is of particular interest to a reader. Doxygen will
document pretty much every part of your code, so do your best here to
point the reader to the actual API.

If your codebase is fairly large or has different sets of APIs, you
should use the doxygen 'group' tag to keep these APIs together. For
example, the roscpp documentation has 'libros' group.
-->

\section rosapi ROS API

List of nodes:
- \ref transform

\subsection transform transform

transform pipes an image topic (using any transport type) into another topic
using a transport of the user's choosing. "raw" is the name of the default transport,
publishing ROS Image messages. What other transports are available depends on what
plugins are built.

Uses of transform include:
- Reduce bandwidth and duplication of effort: Suppose we are publishing camera images from
a robot using a streaming video transport. On an offboard computer we have
several nodes listening to the image topic. Rather than let each listener node
stream from the robot and process the compressed video into still images, we can
start a transform node on the offboard computer:
\verbatim
$ rosrun image_transport transform raw in:=/video_stream_topic out:=/raw_image_topic
\endverbatim
This streams the video to one node, which processes it into still Image messages and
republishes them for use by the other nodes.
- Compatibility with nodes that do not use the image_transport classes. transform may
be used as an intermediary to go to/from the "raw" transport type.

\subsubsection Usage
\verbatim
$ transform transport_type [standard ROS args]
\endverbatim

\par Example

\verbatim
$ transform theora in:=camera/image out:=camera/image_theora           # On robot
$ transform raw in:=camera/image_theora out:=camera/image_decompressed # Offboard
\endverbatim

\subsubsection topics ROS topics

Subscribes to:
- \b "in": the image topic to listen on, may be of any transport type

Publishes to:
- \b "out": the image topic to publish to using the specified transport type

The datatypes of both topics will depend on which transports are used.

\subsubsection parameters ROS parameters

transform itself does not make use of the parameter server except for normal
use by the transport classes (checking "in/transport_type" and setting
"out/transport_type"). Plugins may read or set plugin-specific parameters,
however.

<!--
Names are very important in ROS because they can be remapped on the
command-line, so it is VERY IMPORTANT THAT YOU LIST NAMES AS THEY
APPEAR IN THE CODE. You should list names of every topic, service and
parameter used in your code. There is a template below that you can
use to document each node separately.

List of nodes:
- \b node_name1
- \b node_name2
-->

<!-- START: copy from here to 'END' for each node 

<hr>

\subsection node_name node_name

node_name does (provide a basic description of your node)

\subsubsection Usage
\verbatim
$ node_type1 [standard ROS args]
\endverbatim

\par Example

\verbatim
$ node_type1
\endverbatim


\subsubsection topics ROS topics

Subscribes to:
- \b "in": [std_msgs/FooType] description of in

Publishes to:
- \b "out": [std_msgs/FooType] description of out


\subsubsection parameters ROS parameters

Reads the following parameters from the parameter server

- \b "~param_name" : \b [type] description of param_name
- \b "~my_param" : \b [string] description of my_param

Sets the following parameters on the parameter server

- \b "~param_name" : \b [type] description of param_name


\subsubsection services ROS services
- \b "foo_service": [std_srvs/FooType] description of foo_service


END: copy for each node -->


<!-- START: Uncomment if you have any command-line tools

\section commandline Command-line tools

This section is a catch-all for any additional tools that your package
provides or uses that may be of use to the reader. For example:

- tools/scripts (e.g. rospack, roscd)
- roslaunch .launch files
- xmlparam files

\subsection script_name script_name

Description of what this script/file does.

\subsubsection Usage
\verbatim
$ ./script_name [args]
\endverbatim

\par Example

\verbatim
$ ./script_name foo bar
\endverbatim

END: Command-Line Tools Section -->

*/